
hw.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003a2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000416  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800060  00800060  00000416  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000416  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000448  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  00000484  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c89  00000000  00000000  000004fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000658  00000000  00000000  00001185  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005ea  00000000  00000000  000017dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000011c  00000000  00000000  00001dc8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000409  00000000  00000000  00001ee4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000067b  00000000  00000000  000022ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  00002968  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__vector_1>
   8:	0c 94 82 00 	jmp	0x104	; 0x104 <__vector_2>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_9>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a8 36       	cpi	r26, 0x68	; 104
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 ee 00 	call	0x1dc	; 0x1dc <main>
  74:	0c 94 cf 01 	jmp	0x39e	; 0x39e <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <timer1_init>:

void reverse(){
	PORTA |= (1<<PA5);
	PORTA &= ~(1<<PA4);
	PORTA |= (1<<PA7);
	PORTA &= ~(1<<PA6);
  7c:	8e b5       	in	r24, 0x2e	; 46
  7e:	82 60       	ori	r24, 0x02	; 2
  80:	8e bd       	out	0x2e, r24	; 46
  82:	1d bc       	out	0x2d, r1	; 45
  84:	1c bc       	out	0x2c, r1	; 44
  86:	89 b7       	in	r24, 0x39	; 57
  88:	84 60       	ori	r24, 0x04	; 4
  8a:	89 bf       	out	0x39, r24	; 57
  8c:	78 94       	sei
  8e:	08 95       	ret

00000090 <__vector_9>:
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	1d bc       	out	0x2d, r1	; 45
  9c:	1c bc       	out	0x2c, r1	; 44
  9e:	0f 90       	pop	r0
  a0:	0f be       	out	0x3f, r0	; 63
  a2:	0f 90       	pop	r0
  a4:	1f 90       	pop	r1
  a6:	18 95       	reti

000000a8 <__vector_1>:
  a8:	1f 92       	push	r1
  aa:	0f 92       	push	r0
  ac:	0f b6       	in	r0, 0x3f	; 63
  ae:	0f 92       	push	r0
  b0:	11 24       	eor	r1, r1
  b2:	8f 93       	push	r24
  b4:	9f 93       	push	r25
  b6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <i>
  ba:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <i+0x1>
  be:	01 97       	sbiw	r24, 0x01	; 1
  c0:	61 f4       	brne	.+24     	; 0xda <__vector_1+0x32>
  c2:	8c b5       	in	r24, 0x2c	; 44
  c4:	9d b5       	in	r25, 0x2d	; 45
  c6:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <pulse+0x1>
  ca:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <pulse>
  ce:	1d bc       	out	0x2d, r1	; 45
  d0:	1c bc       	out	0x2c, r1	; 44
  d2:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <i+0x1>
  d6:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <i>
  da:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <i>
  de:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <i+0x1>
  e2:	89 2b       	or	r24, r25
  e4:	41 f4       	brne	.+16     	; 0xf6 <__vector_1+0x4e>
  e6:	1d bc       	out	0x2d, r1	; 45
  e8:	1c bc       	out	0x2c, r1	; 44
  ea:	81 e0       	ldi	r24, 0x01	; 1
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <i+0x1>
  f2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <i>
  f6:	9f 91       	pop	r25
  f8:	8f 91       	pop	r24
  fa:	0f 90       	pop	r0
  fc:	0f be       	out	0x3f, r0	; 63
  fe:	0f 90       	pop	r0
 100:	1f 90       	pop	r1
 102:	18 95       	reti

00000104 <__vector_2>:
 104:	1f 92       	push	r1
 106:	0f 92       	push	r0
 108:	0f b6       	in	r0, 0x3f	; 63
 10a:	0f 92       	push	r0
 10c:	11 24       	eor	r1, r1
 10e:	8f 93       	push	r24
 110:	9f 93       	push	r25
 112:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 116:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
 11a:	01 97       	sbiw	r24, 0x01	; 1
 11c:	61 f4       	brne	.+24     	; 0x136 <__vector_2+0x32>
 11e:	8c b5       	in	r24, 0x2c	; 44
 120:	9d b5       	in	r25, 0x2d	; 45
 122:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <pulse1+0x1>
 126:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <pulse1>
 12a:	1d bc       	out	0x2d, r1	; 45
 12c:	1c bc       	out	0x2c, r1	; 44
 12e:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <_edata+0x1>
 132:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
 136:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 13a:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
 13e:	89 2b       	or	r24, r25
 140:	41 f4       	brne	.+16     	; 0x152 <__vector_2+0x4e>
 142:	1d bc       	out	0x2d, r1	; 45
 144:	1c bc       	out	0x2c, r1	; 44
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <_edata+0x1>
 14e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
 152:	9f 91       	pop	r25
 154:	8f 91       	pop	r24
 156:	0f 90       	pop	r0
 158:	0f be       	out	0x3f, r0	; 63
 15a:	0f 90       	pop	r0
 15c:	1f 90       	pop	r1
 15e:	18 95       	reti

00000160 <getSensorData1>:
 160:	90 9a       	sbi	0x12, 0	; 18
 162:	85 e0       	ldi	r24, 0x05	; 5
 164:	8a 95       	dec	r24
 166:	f1 f7       	brne	.-4      	; 0x164 <getSensorData1+0x4>
 168:	90 98       	cbi	0x12, 0	; 18
 16a:	8f e4       	ldi	r24, 0x4F	; 79
 16c:	93 ec       	ldi	r25, 0xC3	; 195
 16e:	01 97       	sbiw	r24, 0x01	; 1
 170:	f1 f7       	brne	.-4      	; 0x16e <getSensorData1+0xe>
 172:	00 c0       	rjmp	.+0      	; 0x174 <getSensorData1+0x14>
 174:	00 00       	nop
 176:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <pulse>
 17a:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <pulse+0x1>
 17e:	6a e3       	ldi	r22, 0x3A	; 58
 180:	70 e0       	ldi	r23, 0x00	; 0
 182:	0e 94 a7 01 	call	0x34e	; 0x34e <__divmodhi4>
 186:	cb 01       	movw	r24, r22
 188:	08 95       	ret

0000018a <getSensorData2>:
 18a:	91 9a       	sbi	0x12, 1	; 18
 18c:	85 e0       	ldi	r24, 0x05	; 5
 18e:	8a 95       	dec	r24
 190:	f1 f7       	brne	.-4      	; 0x18e <getSensorData2+0x4>
 192:	91 98       	cbi	0x12, 1	; 18
 194:	8f e4       	ldi	r24, 0x4F	; 79
 196:	93 ec       	ldi	r25, 0xC3	; 195
 198:	01 97       	sbiw	r24, 0x01	; 1
 19a:	f1 f7       	brne	.-4      	; 0x198 <getSensorData2+0xe>
 19c:	00 c0       	rjmp	.+0      	; 0x19e <getSensorData2+0x14>
 19e:	00 00       	nop
 1a0:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <pulse1>
 1a4:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <pulse1+0x1>
 1a8:	6a e3       	ldi	r22, 0x3A	; 58
 1aa:	70 e0       	ldi	r23, 0x00	; 0
 1ac:	0e 94 a7 01 	call	0x34e	; 0x34e <__divmodhi4>
 1b0:	cb 01       	movw	r24, r22
 1b2:	08 95       	ret

000001b4 <forward>:
 1b4:	dc 9a       	sbi	0x1b, 4	; 27
 1b6:	dd 98       	cbi	0x1b, 5	; 27
 1b8:	de 9a       	sbi	0x1b, 6	; 27
 1ba:	df 98       	cbi	0x1b, 7	; 27
 1bc:	08 95       	ret

000001be <turn_left>:
}

void turn_left(){
	PORTA |= (1<<PA4);
 1be:	dc 9a       	sbi	0x1b, 4	; 27
	PORTA &= ~(1<<PA5);
 1c0:	dd 98       	cbi	0x1b, 5	; 27
	PORTA &= ~(1<<PA6);
 1c2:	de 98       	cbi	0x1b, 6	; 27
	PORTA |= (1<<PA7);
 1c4:	df 9a       	sbi	0x1b, 7	; 27
 1c6:	08 95       	ret

000001c8 <turn_right>:
}

void turn_right(){
	PORTA &= ~(1<<PA4);
 1c8:	dc 98       	cbi	0x1b, 4	; 27
	PORTA |= (1<<PA5);
 1ca:	dd 9a       	sbi	0x1b, 5	; 27
	PORTA |= (1<<PA6);
 1cc:	de 9a       	sbi	0x1b, 6	; 27
	PORTA &= ~(1<<PA7);
 1ce:	df 98       	cbi	0x1b, 7	; 27
 1d0:	08 95       	ret

000001d2 <stop>:
}

void stop(){
	PORTA &= ~(1<<PA4);
 1d2:	dc 98       	cbi	0x1b, 4	; 27
	PORTA &= ~(1<<PA5);
 1d4:	dd 98       	cbi	0x1b, 5	; 27
	PORTA &= ~(1<<PA6);
 1d6:	de 98       	cbi	0x1b, 6	; 27
	PORTA &= ~(1<<PA7);
 1d8:	df 98       	cbi	0x1b, 7	; 27
 1da:	08 95       	ret

000001dc <main>:



int main(void)

{
 1dc:	0f 93       	push	r16
 1de:	1f 93       	push	r17
 1e0:	cf 93       	push	r28
 1e2:	df 93       	push	r29

	//DDRA = 0xFF;
	DDRA |= (1<<4);
 1e4:	d4 9a       	sbi	0x1a, 4	; 26
	DDRA |= (1<<5);
 1e6:	d5 9a       	sbi	0x1a, 5	; 26
	DDRA |= (1<<6);
 1e8:	d6 9a       	sbi	0x1a, 6	; 26
	DDRA |= (1<<7);
 1ea:	d7 9a       	sbi	0x1a, 7	; 26
	
	DDRB = 0xFF;
 1ec:	8f ef       	ldi	r24, 0xFF	; 255
 1ee:	87 bb       	out	0x17, r24	; 23
	DDRD = 0b11110011; //1 trig , d3 echo
 1f0:	83 ef       	ldi	r24, 0xF3	; 243
 1f2:	81 bb       	out	0x11, r24	; 17
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1f4:	83 ed       	ldi	r24, 0xD3	; 211
 1f6:	90 e3       	ldi	r25, 0x30	; 48
 1f8:	01 97       	sbiw	r24, 0x01	; 1
 1fa:	f1 f7       	brne	.-4      	; 0x1f8 <main+0x1c>
 1fc:	00 c0       	rjmp	.+0      	; 0x1fe <main+0x22>
 1fe:	00 00       	nop
	_delay_ms(50);



	GICR|=(1<<INT0);
 200:	8b b7       	in	r24, 0x3b	; 59
 202:	80 64       	ori	r24, 0x40	; 64
 204:	8b bf       	out	0x3b, r24	; 59
	GICR|=(1<<INT1);
 206:	8b b7       	in	r24, 0x3b	; 59
 208:	80 68       	ori	r24, 0x80	; 128
 20a:	8b bf       	out	0x3b, r24	; 59

	MCUCR|=(1<<ISC00);
 20c:	85 b7       	in	r24, 0x35	; 53
 20e:	81 60       	ori	r24, 0x01	; 1
 210:	85 bf       	out	0x35, r24	; 53
	MCUCR|=(1<<ISC10);
 212:	85 b7       	in	r24, 0x35	; 53
 214:	84 60       	ori	r24, 0x04	; 4
 216:	85 bf       	out	0x35, r24	; 53

	TCCR1A = 0;
 218:	1f bc       	out	0x2f, r1	; 47
	timer1_init();
 21a:	0e 94 3e 00 	call	0x7c	; 0x7c <timer1_init>
	int16_t COUNTA = 0;
	int16_t COUNTB = 0;
	char SHOWA [16];
	char SHOWB [16];

	sei();
 21e:	78 94       	sei
 220:	c0 e2       	ldi	r28, 0x20	; 32
 222:	dc e1       	ldi	r29, 0x1C	; 28
	
	while(Workingtimer<7200) // one cirecle get 1/2 second, we system stop 30 min

	{
		int delaytime=30;
		data1 = getSensorData1();
 224:	0e 94 b0 00 	call	0x160	; 0x160 <getSensorData1>
 228:	8c 01       	movw	r16, r24
		data2 = getSensorData2();
 22a:	0e 94 c5 00 	call	0x18a	; 0x18a <getSensorData2>
		
		if(data1<2 && data2<2)
 22e:	02 30       	cpi	r16, 0x02	; 2
 230:	11 05       	cpc	r17, r1
 232:	0c f0       	brlt	.+2      	; 0x236 <main+0x5a>
 234:	52 c0       	rjmp	.+164    	; 0x2da <main+0xfe>
 236:	02 97       	sbiw	r24, 0x02	; 2
 238:	5c f5       	brge	.+86     	; 0x290 <main+0xb4>
 23a:	06 e0       	ldi	r16, 0x06	; 6
 23c:	10 e0       	ldi	r17, 0x00	; 0
		{
			for (int a=0; a<6; a++)
			{
				PORTB |= 1<<PINB0;
 23e:	c0 9a       	sbi	0x18, 0	; 24
				turn_right();
 240:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <turn_right>
 244:	8b e4       	ldi	r24, 0x4B	; 75
 246:	9d e1       	ldi	r25, 0x1D	; 29
 248:	01 97       	sbiw	r24, 0x01	; 1
 24a:	f1 f7       	brne	.-4      	; 0x248 <main+0x6c>
 24c:	00 c0       	rjmp	.+0      	; 0x24e <main+0x72>
 24e:	00 00       	nop
				_delay_ms(delaytime);
				stop();
 250:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <stop>
 254:	8b e4       	ldi	r24, 0x4B	; 75
 256:	9d e1       	ldi	r25, 0x1D	; 29
 258:	01 97       	sbiw	r24, 0x01	; 1
 25a:	f1 f7       	brne	.-4      	; 0x258 <main+0x7c>
 25c:	00 c0       	rjmp	.+0      	; 0x25e <main+0x82>
 25e:	00 00       	nop
 260:	01 50       	subi	r16, 0x01	; 1
 262:	11 09       	sbc	r17, r1
		data1 = getSensorData1();
		data2 = getSensorData2();
		
		if(data1<2 && data2<2)
		{
			for (int a=0; a<6; a++)
 264:	61 f7       	brne	.-40     	; 0x23e <main+0x62>
				_delay_ms(delaytime);
				stop();
				_delay_ms(delaytime);
			}
			
			forward();
 266:	0e 94 da 00 	call	0x1b4	; 0x1b4 <forward>
 26a:	8b e4       	ldi	r24, 0x4B	; 75
 26c:	9d e1       	ldi	r25, 0x1D	; 29
 26e:	01 97       	sbiw	r24, 0x01	; 1
 270:	f1 f7       	brne	.-4      	; 0x26e <main+0x92>
 272:	00 c0       	rjmp	.+0      	; 0x274 <main+0x98>
 274:	00 00       	nop
			_delay_ms(delaytime);
			stop();
 276:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <stop>
			forward();
 27a:	0e 94 da 00 	call	0x1b4	; 0x1b4 <forward>
 27e:	8b e4       	ldi	r24, 0x4B	; 75
 280:	9d e1       	ldi	r25, 0x1D	; 29
 282:	01 97       	sbiw	r24, 0x01	; 1
 284:	f1 f7       	brne	.-4      	; 0x282 <main+0xa6>
 286:	00 c0       	rjmp	.+0      	; 0x288 <main+0xac>
 288:	00 00       	nop
			_delay_ms(delaytime);
			stop();
 28a:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <stop>
 28e:	55 c0       	rjmp	.+170    	; 0x33a <main+0x15e>
 290:	03 e0       	ldi	r16, 0x03	; 3
 292:	10 e0       	ldi	r17, 0x00	; 0
			
		}else if(data1<2)
		{
			for (int a=0; a<3; a++)
			{
				PORTB &= ~(1<<PINB0);
 294:	c0 98       	cbi	0x18, 0	; 24
				turn_right();
 296:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <turn_right>
 29a:	8b e4       	ldi	r24, 0x4B	; 75
 29c:	9d e1       	ldi	r25, 0x1D	; 29
 29e:	01 97       	sbiw	r24, 0x01	; 1
 2a0:	f1 f7       	brne	.-4      	; 0x29e <main+0xc2>
 2a2:	00 c0       	rjmp	.+0      	; 0x2a4 <main+0xc8>
 2a4:	00 00       	nop
				_delay_ms(delaytime);
				stop();
 2a6:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <stop>
 2aa:	01 50       	subi	r16, 0x01	; 1
 2ac:	11 09       	sbc	r17, r1
			
			
			
		}else if(data1<2)
		{
			for (int a=0; a<3; a++)
 2ae:	91 f7       	brne	.-28     	; 0x294 <main+0xb8>
				PORTB &= ~(1<<PINB0);
				turn_right();
				_delay_ms(delaytime);
				stop();
			}
			forward();
 2b0:	0e 94 da 00 	call	0x1b4	; 0x1b4 <forward>
 2b4:	8b e4       	ldi	r24, 0x4B	; 75
 2b6:	9d e1       	ldi	r25, 0x1D	; 29
 2b8:	01 97       	sbiw	r24, 0x01	; 1
 2ba:	f1 f7       	brne	.-4      	; 0x2b8 <main+0xdc>
 2bc:	00 c0       	rjmp	.+0      	; 0x2be <main+0xe2>
 2be:	00 00       	nop
			_delay_ms(delaytime);
			stop();
 2c0:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <stop>
			forward();
 2c4:	0e 94 da 00 	call	0x1b4	; 0x1b4 <forward>
 2c8:	8b e4       	ldi	r24, 0x4B	; 75
 2ca:	9d e1       	ldi	r25, 0x1D	; 29
 2cc:	01 97       	sbiw	r24, 0x01	; 1
 2ce:	f1 f7       	brne	.-4      	; 0x2cc <main+0xf0>
 2d0:	00 c0       	rjmp	.+0      	; 0x2d2 <main+0xf6>
 2d2:	00 00       	nop
			_delay_ms(delaytime);
			stop();
 2d4:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <stop>
 2d8:	30 c0       	rjmp	.+96     	; 0x33a <main+0x15e>
			
			
		}
		else if(data2<1)
 2da:	18 16       	cp	r1, r24
 2dc:	19 06       	cpc	r1, r25
 2de:	64 f0       	brlt	.+24     	; 0x2f8 <main+0x11c>
		{
			PORTB |= 1<<PINB0;
 2e0:	c0 9a       	sbi	0x18, 0	; 24
			turn_right();
 2e2:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <turn_right>
 2e6:	8b e4       	ldi	r24, 0x4B	; 75
 2e8:	9d e1       	ldi	r25, 0x1D	; 29
 2ea:	01 97       	sbiw	r24, 0x01	; 1
 2ec:	f1 f7       	brne	.-4      	; 0x2ea <main+0x10e>
 2ee:	00 c0       	rjmp	.+0      	; 0x2f0 <main+0x114>
 2f0:	00 00       	nop
			_delay_ms(delaytime);
			stop();
 2f2:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <stop>
 2f6:	21 c0       	rjmp	.+66     	; 0x33a <main+0x15e>
		}
		else if(data2<2)
 2f8:	02 97       	sbiw	r24, 0x02	; 2
 2fa:	5c f4       	brge	.+22     	; 0x312 <main+0x136>
		{
			forward();
 2fc:	0e 94 da 00 	call	0x1b4	; 0x1b4 <forward>
 300:	8b e4       	ldi	r24, 0x4B	; 75
 302:	9d e1       	ldi	r25, 0x1D	; 29
 304:	01 97       	sbiw	r24, 0x01	; 1
 306:	f1 f7       	brne	.-4      	; 0x304 <main+0x128>
 308:	00 c0       	rjmp	.+0      	; 0x30a <main+0x12e>
 30a:	00 00       	nop
			_delay_ms(delaytime);
			stop();
 30c:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <stop>
 310:	14 c0       	rjmp	.+40     	; 0x33a <main+0x15e>
			
		}else
		{
			turn_left();
 312:	0e 94 df 00 	call	0x1be	; 0x1be <turn_left>
 316:	87 e8       	ldi	r24, 0x87	; 135
 318:	93 e1       	ldi	r25, 0x13	; 19
 31a:	01 97       	sbiw	r24, 0x01	; 1
 31c:	f1 f7       	brne	.-4      	; 0x31a <main+0x13e>
 31e:	00 c0       	rjmp	.+0      	; 0x320 <main+0x144>
 320:	00 00       	nop
			_delay_ms(20);
			stop();
 322:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <stop>
			
			forward();
 326:	0e 94 da 00 	call	0x1b4	; 0x1b4 <forward>
 32a:	8b e4       	ldi	r24, 0x4B	; 75
 32c:	9d e1       	ldi	r25, 0x1D	; 29
 32e:	01 97       	sbiw	r24, 0x01	; 1
 330:	f1 f7       	brne	.-4      	; 0x32e <main+0x152>
 332:	00 c0       	rjmp	.+0      	; 0x334 <main+0x158>
 334:	00 00       	nop
			_delay_ms(delaytime);
			stop();
 336:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <stop>
 33a:	21 97       	sbiw	r28, 0x01	; 1
	
	int data1;
	int data2;
	int Workingtimer=0;
	
	while(Workingtimer<7200) // one cirecle get 1/2 second, we system stop 30 min
 33c:	09 f0       	breq	.+2      	; 0x340 <main+0x164>
 33e:	72 cf       	rjmp	.-284    	; 0x224 <main+0x48>
		_delay_ms(15);
		stop();
		*/
		
	}
}
 340:	80 e0       	ldi	r24, 0x00	; 0
 342:	90 e0       	ldi	r25, 0x00	; 0
 344:	df 91       	pop	r29
 346:	cf 91       	pop	r28
 348:	1f 91       	pop	r17
 34a:	0f 91       	pop	r16
 34c:	08 95       	ret

0000034e <__divmodhi4>:
 34e:	97 fb       	bst	r25, 7
 350:	07 2e       	mov	r0, r23
 352:	16 f4       	brtc	.+4      	; 0x358 <__divmodhi4+0xa>
 354:	00 94       	com	r0
 356:	07 d0       	rcall	.+14     	; 0x366 <__divmodhi4_neg1>
 358:	77 fd       	sbrc	r23, 7
 35a:	09 d0       	rcall	.+18     	; 0x36e <__divmodhi4_neg2>
 35c:	0e 94 bb 01 	call	0x376	; 0x376 <__udivmodhi4>
 360:	07 fc       	sbrc	r0, 7
 362:	05 d0       	rcall	.+10     	; 0x36e <__divmodhi4_neg2>
 364:	3e f4       	brtc	.+14     	; 0x374 <__divmodhi4_exit>

00000366 <__divmodhi4_neg1>:
 366:	90 95       	com	r25
 368:	81 95       	neg	r24
 36a:	9f 4f       	sbci	r25, 0xFF	; 255
 36c:	08 95       	ret

0000036e <__divmodhi4_neg2>:
 36e:	70 95       	com	r23
 370:	61 95       	neg	r22
 372:	7f 4f       	sbci	r23, 0xFF	; 255

00000374 <__divmodhi4_exit>:
 374:	08 95       	ret

00000376 <__udivmodhi4>:
 376:	aa 1b       	sub	r26, r26
 378:	bb 1b       	sub	r27, r27
 37a:	51 e1       	ldi	r21, 0x11	; 17
 37c:	07 c0       	rjmp	.+14     	; 0x38c <__udivmodhi4_ep>

0000037e <__udivmodhi4_loop>:
 37e:	aa 1f       	adc	r26, r26
 380:	bb 1f       	adc	r27, r27
 382:	a6 17       	cp	r26, r22
 384:	b7 07       	cpc	r27, r23
 386:	10 f0       	brcs	.+4      	; 0x38c <__udivmodhi4_ep>
 388:	a6 1b       	sub	r26, r22
 38a:	b7 0b       	sbc	r27, r23

0000038c <__udivmodhi4_ep>:
 38c:	88 1f       	adc	r24, r24
 38e:	99 1f       	adc	r25, r25
 390:	5a 95       	dec	r21
 392:	a9 f7       	brne	.-22     	; 0x37e <__udivmodhi4_loop>
 394:	80 95       	com	r24
 396:	90 95       	com	r25
 398:	bc 01       	movw	r22, r24
 39a:	cd 01       	movw	r24, r26
 39c:	08 95       	ret

0000039e <_exit>:
 39e:	f8 94       	cli

000003a0 <__stop_program>:
 3a0:	ff cf       	rjmp	.-2      	; 0x3a0 <__stop_program>
