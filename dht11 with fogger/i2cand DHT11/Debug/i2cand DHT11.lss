
i2cand DHT11.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000066c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000004e  00800060  0000066c  00000700  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000d  008000ae  008000ae  0000074e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000074e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000780  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  000007bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000017b7  00000000  00000000  000008cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000996  00000000  00000000  00002083  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b43  00000000  00000000  00002a19  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000224  00000000  00000000  0000355c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000055c  00000000  00000000  00003780  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000bbf  00000000  00000000  00003cdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  0000489b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e6       	ldi	r30, 0x6C	; 108
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 3a       	cpi	r26, 0xAE	; 174
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ae ea       	ldi	r26, 0xAE	; 174
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ab 3b       	cpi	r26, 0xBB	; 187
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 e6 01 	call	0x3cc	; 0x3cc <main>
  8a:	0c 94 34 03 	jmp	0x668	; 0x668 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <i2c_start>:
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );

}/* i2c_rep_start */
  92:	94 ea       	ldi	r25, 0xA4	; 164
  94:	96 bf       	out	0x36, r25	; 54
  96:	06 b6       	in	r0, 0x36	; 54
  98:	07 fe       	sbrs	r0, 7
  9a:	fd cf       	rjmp	.-6      	; 0x96 <i2c_start+0x4>
  9c:	91 b1       	in	r25, 0x01	; 1
  9e:	98 7f       	andi	r25, 0xF8	; 248
  a0:	98 30       	cpi	r25, 0x08	; 8
  a2:	11 f0       	breq	.+4      	; 0xa8 <i2c_start+0x16>
  a4:	90 31       	cpi	r25, 0x10	; 16
  a6:	79 f4       	brne	.+30     	; 0xc6 <i2c_start+0x34>
  a8:	83 b9       	out	0x03, r24	; 3
  aa:	84 e8       	ldi	r24, 0x84	; 132
  ac:	86 bf       	out	0x36, r24	; 54
  ae:	06 b6       	in	r0, 0x36	; 54
  b0:	07 fe       	sbrs	r0, 7
  b2:	fd cf       	rjmp	.-6      	; 0xae <i2c_start+0x1c>
  b4:	91 b1       	in	r25, 0x01	; 1
  b6:	98 7f       	andi	r25, 0xF8	; 248
  b8:	98 31       	cpi	r25, 0x18	; 24
  ba:	39 f0       	breq	.+14     	; 0xca <i2c_start+0x38>
  bc:	81 e0       	ldi	r24, 0x01	; 1
  be:	90 34       	cpi	r25, 0x40	; 64
  c0:	29 f4       	brne	.+10     	; 0xcc <i2c_start+0x3a>
  c2:	80 e0       	ldi	r24, 0x00	; 0
  c4:	08 95       	ret
  c6:	81 e0       	ldi	r24, 0x01	; 1
  c8:	08 95       	ret
  ca:	80 e0       	ldi	r24, 0x00	; 0
  cc:	08 95       	ret

000000ce <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
  ce:	84 e9       	ldi	r24, 0x94	; 148
  d0:	86 bf       	out	0x36, r24	; 54
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
  d2:	06 b6       	in	r0, 0x36	; 54
  d4:	04 fc       	sbrc	r0, 4
  d6:	fd cf       	rjmp	.-6      	; 0xd2 <i2c_stop+0x4>

}/* i2c_stop */
  d8:	08 95       	ret

000000da <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
  da:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWINT) | (1<<TWEN);
  dc:	84 e8       	ldi	r24, 0x84	; 132
  de:	86 bf       	out	0x36, r24	; 54

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
  e0:	06 b6       	in	r0, 0x36	; 54
  e2:	07 fe       	sbrs	r0, 7
  e4:	fd cf       	rjmp	.-6      	; 0xe0 <i2c_write+0x6>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
  e6:	91 b1       	in	r25, 0x01	; 1
  e8:	98 7f       	andi	r25, 0xF8	; 248
  ea:	81 e0       	ldi	r24, 0x01	; 1
  ec:	98 32       	cpi	r25, 0x28	; 40
  ee:	09 f4       	brne	.+2      	; 0xf2 <i2c_write+0x18>
  f0:	80 e0       	ldi	r24, 0x00	; 0
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
  f2:	08 95       	ret

000000f4 <lcd_sendCommand>:
  f4:	cf 93       	push	r28
  f6:	df 93       	push	r29
  f8:	c8 2f       	mov	r28, r24
  fa:	8e e4       	ldi	r24, 0x4E	; 78
  fc:	0e 94 49 00 	call	0x92	; 0x92 <i2c_start>
 100:	dc 2f       	mov	r29, r28
 102:	d0 7f       	andi	r29, 0xF0	; 240
 104:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <__data_end>
 108:	84 60       	ori	r24, 0x04	; 4
 10a:	8d 2b       	or	r24, r29
 10c:	0e 94 6d 00 	call	0xda	; 0xda <i2c_write>
 110:	89 ef       	ldi	r24, 0xF9	; 249
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	01 97       	sbiw	r24, 0x01	; 1
 116:	f1 f7       	brne	.-4      	; 0x114 <lcd_sendCommand+0x20>
 118:	00 c0       	rjmp	.+0      	; 0x11a <lcd_sendCommand+0x26>
 11a:	00 00       	nop
 11c:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <__data_end>
 120:	8d 2b       	or	r24, r29
 122:	0e 94 6d 00 	call	0xda	; 0xda <i2c_write>
 126:	89 ef       	ldi	r24, 0xF9	; 249
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	01 97       	sbiw	r24, 0x01	; 1
 12c:	f1 f7       	brne	.-4      	; 0x12a <lcd_sendCommand+0x36>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <lcd_sendCommand+0x3c>
 130:	00 00       	nop
 132:	90 e1       	ldi	r25, 0x10	; 16
 134:	c9 9f       	mul	r28, r25
 136:	e0 01       	movw	r28, r0
 138:	11 24       	eor	r1, r1
 13a:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <__data_end>
 13e:	84 60       	ori	r24, 0x04	; 4
 140:	8c 2b       	or	r24, r28
 142:	0e 94 6d 00 	call	0xda	; 0xda <i2c_write>
 146:	89 ef       	ldi	r24, 0xF9	; 249
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	01 97       	sbiw	r24, 0x01	; 1
 14c:	f1 f7       	brne	.-4      	; 0x14a <lcd_sendCommand+0x56>
 14e:	00 c0       	rjmp	.+0      	; 0x150 <lcd_sendCommand+0x5c>
 150:	00 00       	nop
 152:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <__data_end>
 156:	8c 2b       	or	r24, r28
 158:	0e 94 6d 00 	call	0xda	; 0xda <i2c_write>
 15c:	89 ef       	ldi	r24, 0xF9	; 249
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	01 97       	sbiw	r24, 0x01	; 1
 162:	f1 f7       	brne	.-4      	; 0x160 <lcd_sendCommand+0x6c>
 164:	00 c0       	rjmp	.+0      	; 0x166 <lcd_sendCommand+0x72>
 166:	00 00       	nop
 168:	0e 94 67 00 	call	0xce	; 0xce <i2c_stop>
 16c:	df 91       	pop	r29
 16e:	cf 91       	pop	r28
 170:	08 95       	ret

00000172 <lcd_sendData>:
 172:	cf 93       	push	r28
 174:	c8 2f       	mov	r28, r24
 176:	8e e4       	ldi	r24, 0x4E	; 78
 178:	0e 94 49 00 	call	0x92	; 0x92 <i2c_start>
 17c:	c0 7f       	andi	r28, 0xF0	; 240
 17e:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <__data_end>
 182:	84 60       	ori	r24, 0x04	; 4
 184:	8c 2b       	or	r24, r28
 186:	0e 94 6d 00 	call	0xda	; 0xda <i2c_write>
 18a:	89 ef       	ldi	r24, 0xF9	; 249
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	01 97       	sbiw	r24, 0x01	; 1
 190:	f1 f7       	brne	.-4      	; 0x18e <lcd_sendData+0x1c>
 192:	00 c0       	rjmp	.+0      	; 0x194 <lcd_sendData+0x22>
 194:	00 00       	nop
 196:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <__data_end>
 19a:	8c 2b       	or	r24, r28
 19c:	0e 94 6d 00 	call	0xda	; 0xda <i2c_write>
 1a0:	89 ef       	ldi	r24, 0xF9	; 249
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	01 97       	sbiw	r24, 0x01	; 1
 1a6:	f1 f7       	brne	.-4      	; 0x1a4 <lcd_sendData+0x32>
 1a8:	00 c0       	rjmp	.+0      	; 0x1aa <lcd_sendData+0x38>
 1aa:	00 00       	nop
 1ac:	0e 94 67 00 	call	0xce	; 0xce <i2c_stop>
 1b0:	cf 91       	pop	r28
 1b2:	08 95       	ret

000001b4 <lcd_init>:
 1b4:	80 93 ae 00 	sts	0x00AE, r24	; 0x8000ae <__data_end>
 1b8:	80 e3       	ldi	r24, 0x30	; 48
 1ba:	0e 94 b9 00 	call	0x172	; 0x172 <lcd_sendData>
 1be:	80 e3       	ldi	r24, 0x30	; 48
 1c0:	0e 94 b9 00 	call	0x172	; 0x172 <lcd_sendData>
 1c4:	80 e3       	ldi	r24, 0x30	; 48
 1c6:	0e 94 b9 00 	call	0x172	; 0x172 <lcd_sendData>
 1ca:	80 e2       	ldi	r24, 0x20	; 32
 1cc:	0e 94 b9 00 	call	0x172	; 0x172 <lcd_sendData>
 1d0:	87 e8       	ldi	r24, 0x87	; 135
 1d2:	93 e1       	ldi	r25, 0x13	; 19
 1d4:	01 97       	sbiw	r24, 0x01	; 1
 1d6:	f1 f7       	brne	.-4      	; 0x1d4 <lcd_init+0x20>
 1d8:	00 c0       	rjmp	.+0      	; 0x1da <lcd_init+0x26>
 1da:	00 00       	nop
 1dc:	88 e2       	ldi	r24, 0x28	; 40
 1de:	0e 94 7a 00 	call	0xf4	; 0xf4 <lcd_sendCommand>
 1e2:	8c e0       	ldi	r24, 0x0C	; 12
 1e4:	0e 94 7a 00 	call	0xf4	; 0xf4 <lcd_sendCommand>
 1e8:	86 e0       	ldi	r24, 0x06	; 6
 1ea:	0e 94 7a 00 	call	0xf4	; 0xf4 <lcd_sendCommand>
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	0e 94 7a 00 	call	0xf4	; 0xf4 <lcd_sendCommand>
 1f4:	08 95       	ret

000001f6 <lcd_putc>:
 1f6:	cf 93       	push	r28
 1f8:	df 93       	push	r29
 1fa:	c8 2f       	mov	r28, r24
 1fc:	8e e4       	ldi	r24, 0x4E	; 78
 1fe:	0e 94 49 00 	call	0x92	; 0x92 <i2c_start>
 202:	dc 2f       	mov	r29, r28
 204:	d0 7f       	andi	r29, 0xF0	; 240
 206:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <__data_end>
 20a:	d8 2b       	or	r29, r24
 20c:	8d 2f       	mov	r24, r29
 20e:	85 60       	ori	r24, 0x05	; 5
 210:	0e 94 6d 00 	call	0xda	; 0xda <i2c_write>
 214:	da 7f       	andi	r29, 0xFA	; 250
 216:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <__data_end>
 21a:	8d 2b       	or	r24, r29
 21c:	0e 94 6d 00 	call	0xda	; 0xda <i2c_write>
 220:	80 e1       	ldi	r24, 0x10	; 16
 222:	c8 9f       	mul	r28, r24
 224:	90 01       	movw	r18, r0
 226:	11 24       	eor	r1, r1
 228:	c0 91 ae 00 	lds	r28, 0x00AE	; 0x8000ae <__data_end>
 22c:	c5 60       	ori	r28, 0x05	; 5
 22e:	c2 2b       	or	r28, r18
 230:	8c 2f       	mov	r24, r28
 232:	0e 94 6d 00 	call	0xda	; 0xda <i2c_write>
 236:	2c 2f       	mov	r18, r28
 238:	2a 7f       	andi	r18, 0xFA	; 250
 23a:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <__data_end>
 23e:	82 2b       	or	r24, r18
 240:	0e 94 6d 00 	call	0xda	; 0xda <i2c_write>
 244:	0e 94 67 00 	call	0xce	; 0xce <i2c_stop>
 248:	df 91       	pop	r29
 24a:	cf 91       	pop	r28
 24c:	08 95       	ret

0000024e <lcd_goto_xy>:
 24e:	62 30       	cpi	r22, 0x02	; 2
 250:	31 f0       	breq	.+12     	; 0x25e <lcd_goto_xy+0x10>
 252:	63 30       	cpi	r22, 0x03	; 3
 254:	31 f0       	breq	.+12     	; 0x262 <lcd_goto_xy+0x14>
 256:	61 30       	cpi	r22, 0x01	; 1
 258:	29 f4       	brne	.+10     	; 0x264 <lcd_goto_xy+0x16>
 25a:	80 5c       	subi	r24, 0xC0	; 192
 25c:	03 c0       	rjmp	.+6      	; 0x264 <lcd_goto_xy+0x16>
 25e:	8c 5e       	subi	r24, 0xEC	; 236
 260:	01 c0       	rjmp	.+2      	; 0x264 <lcd_goto_xy+0x16>
 262:	8c 5a       	subi	r24, 0xAC	; 172
 264:	80 68       	ori	r24, 0x80	; 128
 266:	0e 94 7a 00 	call	0xf4	; 0xf4 <lcd_sendCommand>
 26a:	08 95       	ret

0000026c <lcd_clear>:
 26c:	81 e0       	ldi	r24, 0x01	; 1
 26e:	0e 94 7a 00 	call	0xf4	; 0xf4 <lcd_sendCommand>
 272:	08 95       	ret

00000274 <lcd_puts>:
 274:	1f 93       	push	r17
 276:	cf 93       	push	r28
 278:	df 93       	push	r29
 27a:	00 97       	sbiw	r24, 0x00	; 0
 27c:	b1 f0       	breq	.+44     	; 0x2aa <lcd_puts+0x36>
 27e:	ec 01       	movw	r28, r24
 280:	10 e0       	ldi	r17, 0x00	; 0
 282:	07 c0       	rjmp	.+14     	; 0x292 <lcd_puts+0x1e>
 284:	fe 01       	movw	r30, r28
 286:	e2 0f       	add	r30, r18
 288:	f3 1f       	adc	r31, r19
 28a:	80 81       	ld	r24, Z
 28c:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <lcd_putc>
 290:	1f 5f       	subi	r17, 0xFF	; 255
 292:	21 2f       	mov	r18, r17
 294:	30 e0       	ldi	r19, 0x00	; 0
 296:	fe 01       	movw	r30, r28
 298:	01 90       	ld	r0, Z+
 29a:	00 20       	and	r0, r0
 29c:	e9 f7       	brne	.-6      	; 0x298 <lcd_puts+0x24>
 29e:	31 97       	sbiw	r30, 0x01	; 1
 2a0:	ec 1b       	sub	r30, r28
 2a2:	fd 0b       	sbc	r31, r29
 2a4:	2e 17       	cp	r18, r30
 2a6:	3f 07       	cpc	r19, r31
 2a8:	68 f3       	brcs	.-38     	; 0x284 <lcd_puts+0x10>
 2aa:	df 91       	pop	r29
 2ac:	cf 91       	pop	r28
 2ae:	1f 91       	pop	r17
 2b0:	08 95       	ret

000002b2 <Request>:
char data[5];
uint8_t foggerTime=5; // for 10 seconds

void Request()				/* Microcontroller send start pulse/request */
{
	DDRA |= (1<<DHT11_PIN);
 2b2:	d0 9a       	sbi	0x1a, 0	; 26
	PORTA &= ~(1<<DHT11_PIN);	/* set to low pin */
 2b4:	d8 98       	cbi	0x1b, 0	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2b6:	87 e8       	ldi	r24, 0x87	; 135
 2b8:	93 e1       	ldi	r25, 0x13	; 19
 2ba:	01 97       	sbiw	r24, 0x01	; 1
 2bc:	f1 f7       	brne	.-4      	; 0x2ba <Request+0x8>
 2be:	00 c0       	rjmp	.+0      	; 0x2c0 <Request+0xe>
 2c0:	00 00       	nop
	_delay_ms(20);			/* wait for 20ms */
	PORTA |= (1<<DHT11_PIN);	/* set to high pin */
 2c2:	d8 9a       	sbi	0x1b, 0	; 27
 2c4:	08 95       	ret

000002c6 <Response>:
}

void Response()				/* receive response from DHT11 */
{
	DDRA &= ~(1<<DHT11_PIN);
 2c6:	d0 98       	cbi	0x1a, 0	; 26
	while(PINA & (1<<DHT11_PIN));
 2c8:	c8 99       	sbic	0x19, 0	; 25
 2ca:	fe cf       	rjmp	.-4      	; 0x2c8 <Response+0x2>
	while((PINA & (1<<DHT11_PIN))==0);
 2cc:	c8 9b       	sbis	0x19, 0	; 25
 2ce:	fe cf       	rjmp	.-4      	; 0x2cc <Response+0x6>
	while(PINA & (1<<DHT11_PIN));
 2d0:	c8 99       	sbic	0x19, 0	; 25
 2d2:	fe cf       	rjmp	.-4      	; 0x2d0 <Response+0xa>
}
 2d4:	08 95       	ret

000002d6 <Receive_data>:

uint8_t Receive_data()			/* receive data */
{
 2d6:	88 e0       	ldi	r24, 0x08	; 8
 2d8:	90 e0       	ldi	r25, 0x00	; 0
	for (int q=0; q<8; q++)
	{
		while((PINA & (1<<DHT11_PIN)) == 0);  /* check received bit 0 or 1 */
 2da:	c8 9b       	sbis	0x19, 0	; 25
 2dc:	fe cf       	rjmp	.-4      	; 0x2da <Receive_data+0x4>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2de:	2a e0       	ldi	r18, 0x0A	; 10
 2e0:	2a 95       	dec	r18
 2e2:	f1 f7       	brne	.-4      	; 0x2e0 <Receive_data+0xa>
		_delay_us(30);
		if(PINA & (1<<DHT11_PIN))/* if high pulse is greater than 30ms */
 2e4:	c8 9b       	sbis	0x19, 0	; 25
 2e6:	07 c0       	rjmp	.+14     	; 0x2f6 <Receive_data+0x20>
		c = (c<<1)|(0x01);	/* then its logic HIGH */
 2e8:	20 91 b0 00 	lds	r18, 0x00B0	; 0x8000b0 <c>
 2ec:	22 0f       	add	r18, r18
 2ee:	21 60       	ori	r18, 0x01	; 1
 2f0:	20 93 b0 00 	sts	0x00B0, r18	; 0x8000b0 <c>
 2f4:	05 c0       	rjmp	.+10     	; 0x300 <Receive_data+0x2a>
		else			/* otherwise its logic LOW */
		c = (c<<1);
 2f6:	20 91 b0 00 	lds	r18, 0x00B0	; 0x8000b0 <c>
 2fa:	22 0f       	add	r18, r18
 2fc:	20 93 b0 00 	sts	0x00B0, r18	; 0x8000b0 <c>
		while(PINA & (1<<DHT11_PIN));
 300:	c8 99       	sbic	0x19, 0	; 25
 302:	fe cf       	rjmp	.-4      	; 0x300 <Receive_data+0x2a>
 304:	01 97       	sbiw	r24, 0x01	; 1
	while(PINA & (1<<DHT11_PIN));
}

uint8_t Receive_data()			/* receive data */
{
	for (int q=0; q<8; q++)
 306:	49 f7       	brne	.-46     	; 0x2da <Receive_data+0x4>
		else			/* otherwise its logic LOW */
		c = (c<<1);
		while(PINA & (1<<DHT11_PIN));
	}
	return c;
}
 308:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <c>
 30c:	08 95       	ret

0000030e <runFogger>:

void runFogger(int runTime)
{
 30e:	cf 93       	push	r28
 310:	df 93       	push	r29
	fogCount++;
 312:	20 91 af 00 	lds	r18, 0x00AF	; 0x8000af <fogCount>
 316:	2f 5f       	subi	r18, 0xFF	; 255
 318:	20 93 af 00 	sts	0x00AF, r18	; 0x8000af <fogCount>
	if (fogCount>5 && fogCount<(fogCount+runTime))
 31c:	26 30       	cpi	r18, 0x06	; 6
 31e:	08 f4       	brcc	.+2      	; 0x322 <runFogger+0x14>
 320:	3f c0       	rjmp	.+126    	; 0x3a0 <runFogger+0x92>
 322:	30 e0       	ldi	r19, 0x00	; 0
 324:	a9 01       	movw	r20, r18
 326:	48 0f       	add	r20, r24
 328:	59 1f       	adc	r21, r25
 32a:	24 17       	cp	r18, r20
 32c:	35 07       	cpc	r19, r21
 32e:	c4 f5       	brge	.+112    	; 0x3a0 <runFogger+0x92>
 330:	ec 01       	movw	r28, r24
	{
		//on fogger
		PORTA |= (1<<fogPin);	/* set to high pin */
 332:	2b b3       	in	r18, 0x1b	; 27
 334:	81 e0       	ldi	r24, 0x01	; 1
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	00 90 61 00 	lds	r0, 0x0061	; 0x800061 <fogPin>
 33c:	02 c0       	rjmp	.+4      	; 0x342 <runFogger+0x34>
 33e:	88 0f       	add	r24, r24
 340:	99 1f       	adc	r25, r25
 342:	0a 94       	dec	r0
 344:	e2 f7       	brpl	.-8      	; 0x33e <runFogger+0x30>
 346:	82 2b       	or	r24, r18
 348:	8b bb       	out	0x1b, r24	; 27
		lcd_clear();
 34a:	0e 94 36 01 	call	0x26c	; 0x26c <lcd_clear>
		lcd_goto_xy(0,0);
 34e:	60 e0       	ldi	r22, 0x00	; 0
 350:	80 e0       	ldi	r24, 0x00	; 0
 352:	0e 94 27 01 	call	0x24e	; 0x24e <lcd_goto_xy>
		lcd_puts("Run Fogger ");
 356:	82 e6       	ldi	r24, 0x62	; 98
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	0e 94 3a 01 	call	0x274	; 0x274 <lcd_puts>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 35e:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <fogPin>
 362:	4a e0       	ldi	r20, 0x0A	; 10
 364:	61 eb       	ldi	r22, 0xB1	; 177
 366:	70 e0       	ldi	r23, 0x00	; 0
 368:	90 e0       	ldi	r25, 0x00	; 0
 36a:	0e 94 ff 02 	call	0x5fe	; 0x5fe <__itoa_ncheck>
		itoa(fogPin,data,10);
		lcd_puts(data);
 36e:	81 eb       	ldi	r24, 0xB1	; 177
 370:	90 e0       	ldi	r25, 0x00	; 0
 372:	0e 94 3a 01 	call	0x274	; 0x274 <lcd_puts>
		
		lcd_goto_xy(0,1);
 376:	61 e0       	ldi	r22, 0x01	; 1
 378:	80 e0       	ldi	r24, 0x00	; 0
 37a:	0e 94 27 01 	call	0x24e	; 0x24e <lcd_goto_xy>
		lcd_puts("Duration ");
 37e:	8e e6       	ldi	r24, 0x6E	; 110
 380:	90 e0       	ldi	r25, 0x00	; 0
 382:	0e 94 3a 01 	call	0x274	; 0x274 <lcd_puts>
 386:	4a e0       	ldi	r20, 0x0A	; 10
 388:	61 eb       	ldi	r22, 0xB1	; 177
 38a:	70 e0       	ldi	r23, 0x00	; 0
 38c:	ce 01       	movw	r24, r28
 38e:	88 0f       	add	r24, r24
 390:	99 1f       	adc	r25, r25
 392:	0e 94 ff 02 	call	0x5fe	; 0x5fe <__itoa_ncheck>
		itoa(runTime*2,data,10);
		lcd_puts(data);
 396:	81 eb       	ldi	r24, 0xB1	; 177
 398:	90 e0       	ldi	r25, 0x00	; 0
 39a:	0e 94 3a 01 	call	0x274	; 0x274 <lcd_puts>
 39e:	0d c0       	rjmp	.+26     	; 0x3ba <runFogger+0xac>
		//_delay_ms(1000);
		//lcd_clear();
	}else
	{
		PORTA &= ~(1<<fogPin);	/* set to low pin */
 3a0:	2b b3       	in	r18, 0x1b	; 27
 3a2:	81 e0       	ldi	r24, 0x01	; 1
 3a4:	90 e0       	ldi	r25, 0x00	; 0
 3a6:	00 90 61 00 	lds	r0, 0x0061	; 0x800061 <fogPin>
 3aa:	02 c0       	rjmp	.+4      	; 0x3b0 <runFogger+0xa2>
 3ac:	88 0f       	add	r24, r24
 3ae:	99 1f       	adc	r25, r25
 3b0:	0a 94       	dec	r0
 3b2:	e2 f7       	brpl	.-8      	; 0x3ac <runFogger+0x9e>
 3b4:	80 95       	com	r24
 3b6:	82 23       	and	r24, r18
 3b8:	8b bb       	out	0x1b, r24	; 27
		//lcd_clear();
	}
	
	// reset fogger
	if (fogCount==15 )
 3ba:	80 91 af 00 	lds	r24, 0x00AF	; 0x8000af <fogCount>
 3be:	8f 30       	cpi	r24, 0x0F	; 15
 3c0:	11 f4       	brne	.+4      	; 0x3c6 <runFogger+0xb8>
	{
		fogCount=0;
 3c2:	10 92 af 00 	sts	0x00AF, r1	; 0x8000af <fogCount>
	}
	
}
 3c6:	df 91       	pop	r29
 3c8:	cf 91       	pop	r28
 3ca:	08 95       	ret

000003cc <main>:

int main(void)
{
	DDRA |= (1<<1); // for fogger 1
 3cc:	d1 9a       	sbi	0x1a, 1	; 26
	DDRA |= (1<<2); // for foger 2
 3ce:	d2 9a       	sbi	0x1a, 2	; 26
	
	DDRB &= ~(1 << PINB0); // for  input1
 3d0:	b8 98       	cbi	0x17, 0	; 23
	DDRB &= ~(1 << PINB1); // for  input2
 3d2:	b9 98       	cbi	0x17, 1	; 23
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3d4:	87 ea       	ldi	r24, 0xA7	; 167
 3d6:	91 e6       	ldi	r25, 0x61	; 97
 3d8:	01 97       	sbiw	r24, 0x01	; 1
 3da:	f1 f7       	brne	.-4      	; 0x3d8 <main+0xc>
 3dc:	00 c0       	rjmp	.+0      	; 0x3de <main+0x12>
 3de:	00 00       	nop
	_delay_ms(100);
	
	
	lcd_init(LCD_BACKLIGHT_ON);			/* Initialize LCD */
 3e0:	88 e0       	ldi	r24, 0x08	; 8
 3e2:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lcd_init>
	lcd_clear();			/* Clear LCD */
 3e6:	0e 94 36 01 	call	0x26c	; 0x26c <lcd_clear>
 3ea:	9f e7       	ldi	r25, 0x7F	; 127
 3ec:	2a e1       	ldi	r18, 0x1A	; 26
 3ee:	46 e0       	ldi	r20, 0x06	; 6
 3f0:	91 50       	subi	r25, 0x01	; 1
 3f2:	20 40       	sbci	r18, 0x00	; 0
 3f4:	40 40       	sbci	r20, 0x00	; 0
 3f6:	e1 f7       	brne	.-8      	; 0x3f0 <main+0x24>
 3f8:	00 c0       	rjmp	.+0      	; 0x3fa <main+0x2e>
 3fa:	00 00       	nop
		lcd_goto_xy(0,0);		/* Enter column and row position */
		
		if ( PINB & (1 << 0))  //PINA & (1<<DHT11_PIN)
		{
			// pin is high
			fogPin=1;
 3fc:	c1 e0       	ldi	r28, 0x01	; 1
		}
		
		if ( PINB & (1 << 1) )
		{
			// pin is high
			fogPin=2;
 3fe:	d2 e0       	ldi	r29, 0x02	; 2
			}
			
			//run fogger
			//foggerTime=2;
			runFogger(foggerTime);
			foggerTime =5; // set default
 400:	15 e0       	ldi	r17, 0x05	; 5
	lcd_clear();			/* Clear LCD */
	_delay_ms(2000);
	
	while(1)
	{
		Request();		/* send start pulse */
 402:	0e 94 59 01 	call	0x2b2	; 0x2b2 <Request>
		Response();		/* receive response */
 406:	0e 94 63 01 	call	0x2c6	; 0x2c6 <Response>
		
		I_RH=Receive_data();	/* store first eight bit in I_RH */
 40a:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <Receive_data>
 40e:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <I_RH>
		D_RH=Receive_data();	/* store next eight bit in D_RH */
 412:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <Receive_data>
 416:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <D_RH>
		I_Temp=Receive_data();	/* store next eight bit in I_Temp */
 41a:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <Receive_data>
 41e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <I_Temp>
		D_Temp=Receive_data();	/* store next eight bit in D_Temp */
 422:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <Receive_data>
 426:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <D_Temp>
		CheckSum=Receive_data();/* store next eight bit in CheckSum */
 42a:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <Receive_data>
 42e:	80 93 b7 00 	sts	0x00B7, r24	; 0x8000b7 <CheckSum>
		
		lcd_goto_xy(0,0);		/* Enter column and row position */
 432:	60 e0       	ldi	r22, 0x00	; 0
 434:	80 e0       	ldi	r24, 0x00	; 0
 436:	0e 94 27 01 	call	0x24e	; 0x24e <lcd_goto_xy>
		
		if ( PINB & (1 << 0))  //PINA & (1<<DHT11_PIN)
 43a:	b0 9b       	sbis	0x16, 0	; 22
 43c:	15 c0       	rjmp	.+42     	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
		{
			// pin is high
			fogPin=1;
 43e:	c0 93 61 00 	sts	0x0061, r28	; 0x800061 <fogPin>
			lcd_goto_xy(0,0);
 442:	60 e0       	ldi	r22, 0x00	; 0
 444:	80 e0       	ldi	r24, 0x00	; 0
 446:	0e 94 27 01 	call	0x24e	; 0x24e <lcd_goto_xy>
			lcd_puts("Set Mode 1");
 44a:	88 e7       	ldi	r24, 0x78	; 120
 44c:	90 e0       	ldi	r25, 0x00	; 0
 44e:	0e 94 3a 01 	call	0x274	; 0x274 <lcd_puts>
 452:	5f e3       	ldi	r21, 0x3F	; 63
 454:	8d e0       	ldi	r24, 0x0D	; 13
 456:	93 e0       	ldi	r25, 0x03	; 3
 458:	51 50       	subi	r21, 0x01	; 1
 45a:	80 40       	sbci	r24, 0x00	; 0
 45c:	90 40       	sbci	r25, 0x00	; 0
 45e:	e1 f7       	brne	.-8      	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 460:	00 c0       	rjmp	.+0      	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
 462:	00 00       	nop
			_delay_ms(1000);
			lcd_clear();
 464:	0e 94 36 01 	call	0x26c	; 0x26c <lcd_clear>

		}
		
		if ( PINB & (1 << 1) )
 468:	b1 9b       	sbis	0x16, 1	; 22
 46a:	15 c0       	rjmp	.+42     	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
		{
			// pin is high
			fogPin=2;
 46c:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <fogPin>
			lcd_goto_xy(0,0);
 470:	60 e0       	ldi	r22, 0x00	; 0
 472:	80 e0       	ldi	r24, 0x00	; 0
 474:	0e 94 27 01 	call	0x24e	; 0x24e <lcd_goto_xy>
			lcd_puts("Set Mode 2");
 478:	83 e8       	ldi	r24, 0x83	; 131
 47a:	90 e0       	ldi	r25, 0x00	; 0
 47c:	0e 94 3a 01 	call	0x274	; 0x274 <lcd_puts>
 480:	2f e3       	ldi	r18, 0x3F	; 63
 482:	4d e0       	ldi	r20, 0x0D	; 13
 484:	53 e0       	ldi	r21, 0x03	; 3
 486:	21 50       	subi	r18, 0x01	; 1
 488:	40 40       	sbci	r20, 0x00	; 0
 48a:	50 40       	sbci	r21, 0x00	; 0
 48c:	e1 f7       	brne	.-8      	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
 48e:	00 c0       	rjmp	.+0      	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
 490:	00 00       	nop
			_delay_ms(1000);
			lcd_clear();
 492:	0e 94 36 01 	call	0x26c	; 0x26c <lcd_clear>
		}
		
		
		lcd_goto_xy(0,0);
 496:	60 e0       	ldi	r22, 0x00	; 0
 498:	80 e0       	ldi	r24, 0x00	; 0
 49a:	0e 94 27 01 	call	0x24e	; 0x24e <lcd_goto_xy>
		lcd_puts("Humidity =");
 49e:	8e e8       	ldi	r24, 0x8E	; 142
 4a0:	90 e0       	ldi	r25, 0x00	; 0
 4a2:	0e 94 3a 01 	call	0x274	; 0x274 <lcd_puts>
		lcd_goto_xy(0,1);
 4a6:	6c 2f       	mov	r22, r28
 4a8:	80 e0       	ldi	r24, 0x00	; 0
 4aa:	0e 94 27 01 	call	0x24e	; 0x24e <lcd_goto_xy>
		lcd_puts("Temp = ");
 4ae:	89 e9       	ldi	r24, 0x99	; 153
 4b0:	90 e0       	ldi	r25, 0x00	; 0
 4b2:	0e 94 3a 01 	call	0x274	; 0x274 <lcd_puts>
		
		if ((I_RH + D_RH + I_Temp + D_Temp) != CheckSum)
 4b6:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <I_RH>
 4ba:	90 e0       	ldi	r25, 0x00	; 0
 4bc:	20 91 b6 00 	lds	r18, 0x00B6	; 0x8000b6 <D_RH>
 4c0:	ac 01       	movw	r20, r24
 4c2:	42 0f       	add	r20, r18
 4c4:	51 1d       	adc	r21, r1
 4c6:	9a 01       	movw	r18, r20
 4c8:	40 91 b8 00 	lds	r20, 0x00B8	; 0x8000b8 <I_Temp>
 4cc:	24 0f       	add	r18, r20
 4ce:	31 1d       	adc	r19, r1
 4d0:	40 91 ba 00 	lds	r20, 0x00BA	; 0x8000ba <D_Temp>
 4d4:	24 0f       	add	r18, r20
 4d6:	31 1d       	adc	r19, r1
 4d8:	40 91 b7 00 	lds	r20, 0x00B7	; 0x8000b7 <CheckSum>
 4dc:	50 e0       	ldi	r21, 0x00	; 0
 4de:	24 17       	cp	r18, r20
 4e0:	35 07       	cpc	r19, r21
 4e2:	49 f0       	breq	.+18     	; 0x4f6 <__LOCK_REGION_LENGTH__+0xf6>
		{
			lcd_goto_xy(0,0);
 4e4:	60 e0       	ldi	r22, 0x00	; 0
 4e6:	80 e0       	ldi	r24, 0x00	; 0
 4e8:	0e 94 27 01 	call	0x24e	; 0x24e <lcd_goto_xy>
			lcd_puts("Error");
 4ec:	81 ea       	ldi	r24, 0xA1	; 161
 4ee:	90 e0       	ldi	r25, 0x00	; 0
 4f0:	0e 94 3a 01 	call	0x274	; 0x274 <lcd_puts>
 4f4:	78 c0       	rjmp	.+240    	; 0x5e6 <__LOCK_REGION_LENGTH__+0x1e6>
 4f6:	4a e0       	ldi	r20, 0x0A	; 10
 4f8:	61 eb       	ldi	r22, 0xB1	; 177
 4fa:	70 e0       	ldi	r23, 0x00	; 0
 4fc:	0e 94 ff 02 	call	0x5fe	; 0x5fe <__itoa_ncheck>
		}
		else
		{
			itoa(I_RH,data,10);
			lcd_goto_xy(11,0);
 500:	60 e0       	ldi	r22, 0x00	; 0
 502:	8b e0       	ldi	r24, 0x0B	; 11
 504:	0e 94 27 01 	call	0x24e	; 0x24e <lcd_goto_xy>
			lcd_puts(data);
 508:	81 eb       	ldi	r24, 0xB1	; 177
 50a:	90 e0       	ldi	r25, 0x00	; 0
 50c:	0e 94 3a 01 	call	0x274	; 0x274 <lcd_puts>
			lcd_puts(".");
 510:	87 ea       	ldi	r24, 0xA7	; 167
 512:	90 e0       	ldi	r25, 0x00	; 0
 514:	0e 94 3a 01 	call	0x274	; 0x274 <lcd_puts>
 518:	80 91 b6 00 	lds	r24, 0x00B6	; 0x8000b6 <D_RH>
 51c:	4a e0       	ldi	r20, 0x0A	; 10
 51e:	61 eb       	ldi	r22, 0xB1	; 177
 520:	70 e0       	ldi	r23, 0x00	; 0
 522:	90 e0       	ldi	r25, 0x00	; 0
 524:	0e 94 ff 02 	call	0x5fe	; 0x5fe <__itoa_ncheck>
			
			itoa(D_RH,data,10);
			lcd_puts(data);
 528:	81 eb       	ldi	r24, 0xB1	; 177
 52a:	90 e0       	ldi	r25, 0x00	; 0
 52c:	0e 94 3a 01 	call	0x274	; 0x274 <lcd_puts>
			lcd_puts("%");
 530:	89 ea       	ldi	r24, 0xA9	; 169
 532:	90 e0       	ldi	r25, 0x00	; 0
 534:	0e 94 3a 01 	call	0x274	; 0x274 <lcd_puts>
 538:	80 91 b8 00 	lds	r24, 0x00B8	; 0x8000b8 <I_Temp>
 53c:	4a e0       	ldi	r20, 0x0A	; 10
 53e:	61 eb       	ldi	r22, 0xB1	; 177
 540:	70 e0       	ldi	r23, 0x00	; 0
 542:	90 e0       	ldi	r25, 0x00	; 0
 544:	0e 94 ff 02 	call	0x5fe	; 0x5fe <__itoa_ncheck>

			itoa(I_Temp,data,10);
			lcd_goto_xy(6,1);
 548:	6c 2f       	mov	r22, r28
 54a:	86 e0       	ldi	r24, 0x06	; 6
 54c:	0e 94 27 01 	call	0x24e	; 0x24e <lcd_goto_xy>
			lcd_puts(data);
 550:	81 eb       	ldi	r24, 0xB1	; 177
 552:	90 e0       	ldi	r25, 0x00	; 0
 554:	0e 94 3a 01 	call	0x274	; 0x274 <lcd_puts>
			lcd_puts(".");
 558:	87 ea       	ldi	r24, 0xA7	; 167
 55a:	90 e0       	ldi	r25, 0x00	; 0
 55c:	0e 94 3a 01 	call	0x274	; 0x274 <lcd_puts>
 560:	80 91 ba 00 	lds	r24, 0x00BA	; 0x8000ba <D_Temp>
 564:	4a e0       	ldi	r20, 0x0A	; 10
 566:	61 eb       	ldi	r22, 0xB1	; 177
 568:	70 e0       	ldi	r23, 0x00	; 0
 56a:	90 e0       	ldi	r25, 0x00	; 0
 56c:	0e 94 ff 02 	call	0x5fe	; 0x5fe <__itoa_ncheck>
			
			itoa(D_Temp,data,10);
			lcd_puts(data);
 570:	81 eb       	ldi	r24, 0xB1	; 177
 572:	90 e0       	ldi	r25, 0x00	; 0
 574:	0e 94 3a 01 	call	0x274	; 0x274 <lcd_puts>
			//lcd_sendData(0xDF);
			lcd_puts("C ");
 578:	8b ea       	ldi	r24, 0xAB	; 171
 57a:	90 e0       	ldi	r25, 0x00	; 0
 57c:	0e 94 3a 01 	call	0x274	; 0x274 <lcd_puts>
			lcd_puts(data);
			lcd_puts(" ");
			*/
			
			// adjust fogger time-------------------------------------
			if (I_Temp>34) //I_Temp>30
 580:	80 91 b8 00 	lds	r24, 0x00B8	; 0x8000b8 <I_Temp>
 584:	83 32       	cpi	r24, 0x23	; 35
 586:	30 f0       	brcs	.+12     	; 0x594 <__LOCK_REGION_LENGTH__+0x194>
			{
				foggerTime = foggerTime-2;
 588:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 58c:	82 50       	subi	r24, 0x02	; 2
 58e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
 592:	10 c0       	rjmp	.+32     	; 0x5b4 <__LOCK_REGION_LENGTH__+0x1b4>
			}else if (I_Temp>32) //I_Temp>30
 594:	81 32       	cpi	r24, 0x21	; 33
 596:	30 f0       	brcs	.+12     	; 0x5a4 <__LOCK_REGION_LENGTH__+0x1a4>
			{
				foggerTime--;
 598:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 59c:	81 50       	subi	r24, 0x01	; 1
 59e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
 5a2:	08 c0       	rjmp	.+16     	; 0x5b4 <__LOCK_REGION_LENGTH__+0x1b4>
			}else if(I_Temp>30)
			{
				// No default time change
			}else if(I_Temp>28)
 5a4:	8d 51       	subi	r24, 0x1D	; 29
 5a6:	82 30       	cpi	r24, 0x02	; 2
 5a8:	28 f4       	brcc	.+10     	; 0x5b4 <__LOCK_REGION_LENGTH__+0x1b4>
			{
				foggerTime++;
 5aa:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 5ae:	8f 5f       	subi	r24, 0xFF	; 255
 5b0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
			}
			
			
			if (I_RH>95) //I_Temp>30
 5b4:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <I_RH>
 5b8:	80 36       	cpi	r24, 0x60	; 96
 5ba:	30 f0       	brcs	.+12     	; 0x5c8 <__LOCK_REGION_LENGTH__+0x1c8>
			{
				foggerTime++;
 5bc:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 5c0:	8f 5f       	subi	r24, 0xFF	; 255
 5c2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
 5c6:	08 c0       	rjmp	.+16     	; 0x5d8 <__LOCK_REGION_LENGTH__+0x1d8>
			}else if(I_RH>90)
			{
				// no fogger time change
			}else if (I_RH>85)
 5c8:	86 55       	subi	r24, 0x56	; 86
 5ca:	85 30       	cpi	r24, 0x05	; 5
 5cc:	28 f4       	brcc	.+10     	; 0x5d8 <__LOCK_REGION_LENGTH__+0x1d8>
			{
				foggerTime--;
 5ce:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 5d2:	81 50       	subi	r24, 0x01	; 1
 5d4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
			}
			
			//run fogger
			//foggerTime=2;
			runFogger(foggerTime);
 5d8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 5dc:	90 e0       	ldi	r25, 0x00	; 0
 5de:	0e 94 87 01 	call	0x30e	; 0x30e <runFogger>
			foggerTime =5; // set default
 5e2:	10 93 60 00 	sts	0x0060, r17	; 0x800060 <__data_start>
 5e6:	5f e7       	ldi	r21, 0x7F	; 127
 5e8:	8a e1       	ldi	r24, 0x1A	; 26
 5ea:	96 e0       	ldi	r25, 0x06	; 6
 5ec:	51 50       	subi	r21, 0x01	; 1
 5ee:	80 40       	sbci	r24, 0x00	; 0
 5f0:	90 40       	sbci	r25, 0x00	; 0
 5f2:	e1 f7       	brne	.-8      	; 0x5ec <__LOCK_REGION_LENGTH__+0x1ec>
 5f4:	00 c0       	rjmp	.+0      	; 0x5f6 <__LOCK_REGION_LENGTH__+0x1f6>
 5f6:	00 00       	nop
	
		
		}
	
		_delay_ms(2000);
		lcd_clear();
 5f8:	0e 94 36 01 	call	0x26c	; 0x26c <lcd_clear>
		
		
	} 
 5fc:	02 cf       	rjmp	.-508    	; 0x402 <__LOCK_REGION_LENGTH__+0x2>

000005fe <__itoa_ncheck>:
 5fe:	bb 27       	eor	r27, r27
 600:	4a 30       	cpi	r20, 0x0A	; 10
 602:	31 f4       	brne	.+12     	; 0x610 <__itoa_ncheck+0x12>
 604:	99 23       	and	r25, r25
 606:	22 f4       	brpl	.+8      	; 0x610 <__itoa_ncheck+0x12>
 608:	bd e2       	ldi	r27, 0x2D	; 45
 60a:	90 95       	com	r25
 60c:	81 95       	neg	r24
 60e:	9f 4f       	sbci	r25, 0xFF	; 255
 610:	0c 94 0b 03 	jmp	0x616	; 0x616 <__utoa_common>

00000614 <__utoa_ncheck>:
 614:	bb 27       	eor	r27, r27

00000616 <__utoa_common>:
 616:	fb 01       	movw	r30, r22
 618:	55 27       	eor	r21, r21
 61a:	aa 27       	eor	r26, r26
 61c:	88 0f       	add	r24, r24
 61e:	99 1f       	adc	r25, r25
 620:	aa 1f       	adc	r26, r26
 622:	a4 17       	cp	r26, r20
 624:	10 f0       	brcs	.+4      	; 0x62a <__utoa_common+0x14>
 626:	a4 1b       	sub	r26, r20
 628:	83 95       	inc	r24
 62a:	50 51       	subi	r21, 0x10	; 16
 62c:	b9 f7       	brne	.-18     	; 0x61c <__utoa_common+0x6>
 62e:	a0 5d       	subi	r26, 0xD0	; 208
 630:	aa 33       	cpi	r26, 0x3A	; 58
 632:	08 f0       	brcs	.+2      	; 0x636 <__utoa_common+0x20>
 634:	a9 5d       	subi	r26, 0xD9	; 217
 636:	a1 93       	st	Z+, r26
 638:	00 97       	sbiw	r24, 0x00	; 0
 63a:	79 f7       	brne	.-34     	; 0x61a <__utoa_common+0x4>
 63c:	b1 11       	cpse	r27, r1
 63e:	b1 93       	st	Z+, r27
 640:	11 92       	st	Z+, r1
 642:	cb 01       	movw	r24, r22
 644:	0c 94 24 03 	jmp	0x648	; 0x648 <strrev>

00000648 <strrev>:
 648:	dc 01       	movw	r26, r24
 64a:	fc 01       	movw	r30, r24
 64c:	67 2f       	mov	r22, r23
 64e:	71 91       	ld	r23, Z+
 650:	77 23       	and	r23, r23
 652:	e1 f7       	brne	.-8      	; 0x64c <strrev+0x4>
 654:	32 97       	sbiw	r30, 0x02	; 2
 656:	04 c0       	rjmp	.+8      	; 0x660 <strrev+0x18>
 658:	7c 91       	ld	r23, X
 65a:	6d 93       	st	X+, r22
 65c:	70 83       	st	Z, r23
 65e:	62 91       	ld	r22, -Z
 660:	ae 17       	cp	r26, r30
 662:	bf 07       	cpc	r27, r31
 664:	c8 f3       	brcs	.-14     	; 0x658 <strrev+0x10>
 666:	08 95       	ret

00000668 <_exit>:
 668:	f8 94       	cli

0000066a <__stop_program>:
 66a:	ff cf       	rjmp	.-2      	; 0x66a <__stop_program>
